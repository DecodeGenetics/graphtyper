#include <string>
#include <vector>
#include <stdio.h>
#include <climits>
#include <cstdio>

#include <iostream>
#include <fstream>

#include <graphtyper/utilities/adapter_removal.hpp>

#include <seqan/basic.h>
#include <seqan/stream.h>
#include <seqan/sequence.h>

#include <catch.hpp>


TEST_CASE("Entire adapter found in read (case 1).")
{
  gyper::AdapterRemoval<gyper::Illumina> ar;

  SECTION("Read starts with the adapter will discard the entire read")
  {
    seqan::Dna5String read1 = "AGATCGGAAGAGCACACGTCTGAACTCCAGTCACACAGTGATCTCGTATGCCGTCTTCTGCTTGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    seqan::Dna5String read2 = "ATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

    auto keep = ar.remove_adapters_from_read(read1, read2);
    ar.remove(keep, read1, read2);

    REQUIRE(read1 == "");
    REQUIRE(read2 == "");
  }

  SECTION("The first base is missing (no idea how this can happen, but it does)")
  {
    seqan::Dna5String read1 = "GATCGGAAGAGCACACGTCTGAACTCCAGTCACACAGTGATCTCGTATGCCGTCTTCTGCTTGAAAAAAAAAAAAAACAAAAATGACAGCTACTCACAAAAAAAAAAAAAAAAAAAAAAGAAAGA";
    seqan::Dna5String read2 = "GATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATTAAAAAAAAAAAAAAAAAAAAAAAGAAGGGGGAGGGCGAAGGTACAAACAAAAAGAAAAGAGAAGAGCA";

    auto keep = ar.remove_adapters_from_read(read1, read2);
    ar.remove(keep, read1, read2);

    REQUIRE(read1 == "");
    REQUIRE(read2 == "G");
  }

  SECTION("One real base (T) and then adapter")
  {
    seqan::Dna5String read1 = "TAGATCGGAAGAGCACACGTCTGAACTCCAGTCACACAGTGATCTCGTATGCCGTCTTCTGCTTGAAAAAAAAAAAAAACAAAAATGACAGCTACTCACAAAAAAAAAAAAAAAAAAAAAAGAAAGA";
    seqan::Dna5String read2 = "TATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATTAAAAAAAAAAAAAAAAAAAAAAAGAAGGGGGAGGGCGAAGGTACAAACAAAAAGAAAAGAGAAGAGCA";

    auto keep = ar.remove_adapters_from_read(read1, read2);
    ar.remove(keep, read1, read2);

    REQUIRE(read1 == "T");
    REQUIRE(read2 == "T");
  }

  SECTION("Adapter sequence at the end of the read")
  {
    seqan::Dna5String read1 = "ATTAATTAATTAACCAACCAACCAAGGAAGGAAGATCGGAAGAGCACACGTCTGAACTCCAGTCACACAGTGATCTCGTATGCCGTCTTCTGCTTGAAAAA";
    seqan::Dna5String read2 = "ATTAATTAATTAACCAACCAACCAAGGAAGGAATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATTAAAAAAAAAAAAAAAAA";

    auto keep = ar.remove_adapters_from_read(read1, read2);
    ar.remove(keep, read1, read2);

    REQUIRE(read1 == "ATTAATTAATTAACCAACCAACCAAGGAAGGA");
    REQUIRE(read2 == "ATTAATTAATTAACCAACCAACCAAGGAAGGA");
  }
}


TEST_CASE("Entire adapter found in read 1 only (case 2).")
{
  gyper::AdapterRemoval<gyper::Illumina> ar;

  SECTION("Suffix of read 2 matches the prefix of the adapter")
  {
    seqan::Dna5String read1 = "ATTAGGGGGAGATCGGAAGAGCACACGTCTGAACTCCAGTCACACAGTGATCTCGTATGCCGTCTTCTGCTTGAAAAAAAAAAAAAACAAAAATGACAGCTACTCACAAAAAAAAAAAAAAAAAAAAAAGAAAGA";
    seqan::Dna5String read2 = "ATTAGGGGGATTAGGGGGATTAGGGGGATTAGGGGGATTAGGGGGATTAGGGGGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGT";

    auto keep = ar.remove_adapters_from_read(read1, read2);
    ar.remove(keep, read1, read2);

    REQUIRE(read1 == "ATTAGGGGG");
    REQUIRE(read2 == "ATTAGGGGGATTAGGGGGATTAGGGGGATTAGGGGGATTAGGGGGATTAGGGGG");
  }

  SECTION("Suffix of read 2 does not match the prefix of the adapter")
  {
    seqan::Dna5String read1 = "ATTAGGGGGAGATCGGAAGAGCACACGTCTGAACTCCAGTCACACAGTGATCTCGTATGCCGTCTTCTGCTTGAAAAAAAAAAAAAACAAAAATGACAGCTACTCACAAAAAAAAAAAAAAAAAAAAAAGAAAGA";
    seqan::Dna5String read2 = "ATTAGGGGGATTAGGGGGATTAGGGGGATTAGGGGGATTAGGGGGATTAGGGGGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTAAAAAAAA";

    auto keep = ar.remove_adapters_from_read(read1, read2);
    ar.remove(keep, read1, read2);

    REQUIRE(read1 == "ATTAGGGGGAGATCGGAAGAGCACACGTCTGAACTCCAGTCACACAGTGATCTCGTATGCCGTCTTCTGCTTGAAAAAAAAAAAAAACAAAAATGACAGCTACTCACAAAAAAAAAAAAAAAAAAAAAAGAAAGA");
    REQUIRE(read2 == "ATTAGGGGGATTAGGGGGATTAGGGGGATTAGGGGGATTAGGGGGATTAGGGGGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTAAAAAAAA");
  }
}


TEST_CASE("Entire adapter found in read 1 only (case 3).")
{
  gyper::AdapterRemoval<gyper::Illumina> ar;

  SECTION("Suffix of read 1 matches the prefix of the adapter")
  {
    seqan::Dna5String read1 = "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAGATCGGAAGAGCACACGTCTGAACTCCAGTCAC";
    seqan::Dna5String read2 = "GATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATTAAAAAAAAAAAAAAAAAAAAAAAGAAGGGGGAGGGCGAAGGTACAAACAAAAAGAAAAGAGAAGAGCA";

    auto keep = ar.remove_adapters_from_read(read1, read2);
    ar.remove(keep, read1, read2);

    REQUIRE(read1 == "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG");
    REQUIRE(read2 == "G");
  }

  SECTION("Suffix of read 1 does not match the prefix of the adapter")
  {
    seqan::Dna5String read1 = "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAGATCGGAAGAGCACAAAAACGTCTGAACTCCAGTCAC";
    seqan::Dna5String read2 = "GATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATTAAAAAAAAAAAAAAAAAAAAAAAGAAGGGGGAGGGCGAAGGTACAAACAAAAAGAAAAGAGAAGAGCA";

    auto keep = ar.remove_adapters_from_read(read1, read2);
    ar.remove(keep, read1, read2);

    REQUIRE(read1 == "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAGATCGGAAGAGCACAAAAACGTCTGAACTCCAGTCAC");
    REQUIRE(read2 == "GATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATTAAAAAAAAAAAAAAAAAAAAAAAGAAGGGGGAGGGCGAAGGTACAAACAAAAAGAAAAGAGAAGAGCA");
  }
}


TEST_CASE("Two partial adapters")
{
  gyper::AdapterRemoval<gyper::Illumina> ar;

  SECTION("Two partial adapters (exact match)")
  {
    seqan::Dna5String read1 = "GGGGGGGGGGGAGATCGGAAGAGCACACGTCTGAACTCCAGTCAC";
    seqan::Dna5String read2 = "CCCCCCCCCCCATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTA";

    auto keep = ar.remove_adapters_from_read(read1, read2);
    ar.remove(keep, read1, read2);

    REQUIRE(read1 == "GGGGGGGGGGG");
    REQUIRE(read2 == "CCCCCCCCCCC");
  }
}

TEST_CASE("Real example of HiSeqX")
{
  gyper::AdapterRemoval<gyper::Illumina> ar;

  seqan::Dna5String read1 = "ATCGGAAGAGCACACGTCTGAACTCCAGTCACCTGAAGCTATCTCGTATGCCGTCTTCTGCTTGAAAAAAAAAAAAAAAGACAGAGCTGGGCAGCCACTCCCAGCCCGCCTTAGGGTCTACAATACGTACACGACAAAGGTTGACGGTACG";
  seqan::Dna5String read2 = "GCCTCGGCGTCCGCTGCTCTTGTTTTTTTTTTGCTTCGTTTCCAGTGGCTTCTCCCATCGCATGCTTTCTTTTTTTTTTTTTTAATGATACGGCGACCACCGAGATCTACACGGCTCTGAACACTCTTTCCCTACACGACGCTCTTCCGAT";

  auto keep = ar.remove_adapters_from_read_read2_complemented(read1, read2);
  ar.remove(keep, read1, read2);

  REQUIRE(read1 == "");
  REQUIRE(read2 == "");
}


TEST_CASE("std::bad_alloc")
{
  // "My std::bad_alloc test"
  gyper::AdapterRemoval<gyper::Illumina> ar;

  seqan::Dna5String read1 = "ATCGGAAGAGCACACGTCTGAACTCCAGTCACCTGAAGCTAACTCGTATGCCGTTTTCTGCTTGAAAAAAAAAAACAATTATTTATCAATGTACTTTTAAAAATTTAGATCGGAAGAGCACACGCCTGAACTCCAGGCACCTGAAGCGACC";
  seqan::Dna5String read2 = "TTTCGGTTCTGATCTCTCTTTCCCTTCACTTTGTTTTTCCTATCTATCAAAAATCTACAGTTGAGTAGTTTTTTTTTTTTTTTAATGATACGGCGACCACCGAGATCTACACGGCTCTGAACACTCTTTCCCTACACGACGCTCTTCCGAT";

  auto keep = ar.remove_adapters_from_read_read2_complemented(read1, read2);
  ar.remove(keep, read1, read2);

  REQUIRE(read1 == "ATCGGAAGAGCACACGTCTGAACTCCAGTCACCTGAAGCTAACTCGTATGCCGTTTTCTGCTTGAAAAAAAAAAACAATTATTTATCAATGTACTTTTAAAAATTTA");
  REQUIRE(read2 == "");
}

// TEST_CASE("This segfaults")
// {
//   gyper::AdapterRemoval<gyper::Illumina> ar;

//   seqan::Dna5String read1 = "GAGTCAGTCATGCCAAGAACCTCCATGGTAGGGGGTTCCAGGAGCTGCTCATACAGGAGGGTCTCCATCAAGATGTCTCTGGAGAGGGGTCTTACTTCAGACATTTCTCCTCTGGGGCAAAAAGACAGCATATGACTGGACCCCTAAGAAC";
//   seqan::Dna5String read2 = "GGGATATTGACGGCTTTAGCGGATCAAAAGAGCTGGTGAGTAGGGCTATACAATCTGGGGGTCATCCTGTGAGAGAGCCCCCAGACTGCTCAGTTCTTAGGGGTCCAGTCATATGCTGTCTTTTTGCCCCAGAGGAGAAATGTCTGAAGTA";

//   ar.remove_adapters_from_read(read1, read2);
// }
